import numpy as np
import pandas as pd

# Read the Excel file into a pandas DataFrame
d = pd.read_excel("AAA3.xlsx")

print(d.head())

iteration = 100
n_ants = 3
n_citys = 3

# initialization part
m = n_ants
n = n_citys
e = 0.5         # evaporation rate
alpha = 1       # pheromone factor
beta = 2        # visibility factor

# calculating the visibility of the next city visibility(i,j) = 1/d(i,j)
visibility = 1 / d.values
visibility[visibility == np.inf] = 0

# initializing pheromone present at the paths to the cities
pheromone = 0.1 * np.ones((n, n))

# Get user input for origin and destination
start_point = 2
end_point = 3  # Assuming destination point is fixed, change if needed

# initializing the route of the ants with size route(n_ants, n_citys + 1)
# note adding 1 because we want to come back to the source city
route = np.ones((m, n + 1))
route2 = np.ones((m, n + 1))
#Calcula e armazena a IDA
for ite in range(iteration):
    for i in range(m):
        # Set starting point
        route[i, 0] = start_point
        # Set ending point
        route[i, -1] = end_point
        temp_visibility = np.array(visibility)  # creating a copy of visibility
        cur_loc = start_point - 1  # current city of the ant
        for j in range(n - 1):
            combine_feature = np.zeros(n)  # initializing combine_feature array to zero
            cum_prob = np.zeros(n)  # initializing cumulative probability array to zeros
            temp_visibility[:, cur_loc] = 0  # making visibility of the current city as zero
            p_feature = np.power(pheromone[cur_loc, :], beta)  # calculating pheromone feature
            v_feature = np.power(temp_visibility[cur_loc, :], alpha)  # calculating visibility feature
            p_feature = p_feature[:, np.newaxis]  # adding axis to make a size[5,1]
            v_feature = v_feature[:, np.newaxis]  # adding axis to make a size[5,1]
            combine_feature = np.multiply(p_feature, v_feature)  # calculating the combine feature
            total = np.sum(combine_feature)  # sum of all the feature
            probs = combine_feature / total  # finding probability of element probs(i) = combine_feature(i)/total
            cum_prob = np.cumsum(probs)  # calculating cumulative sum
            # Choose next city based on probability
            r = np.random.random_sample()  # random no in [0,1)
            next_city = np.nonzero(cum_prob > r)[0][0] + 1
            # If the next city is the destination, break the loop
            if next_city == end_point:
                route[i, j + 1] = end_point
                break
            else:
                route[i, j + 1] = next_city  # adding city to route
                cur_loc = next_city - 1
    route_opt = np.array(route)  # initializing optimal route
    dist_cost = np.zeros((m, 1))  # initializing total_distance_of_tour with zero
    for i in range(m):
        s = 0
        for j in range(n):
            s = s + d.values[int(route_opt[i, j]) - 1, int(route_opt[i, j + 1]) - 1]  # calculating total tour distance
        dist_cost[i] = s  # storing distance of tour for 'i'th ant at location 'i'
    dist_min_loc = np.argmin(dist_cost)  # finding location of minimum of dist_cost
    dist_min_cost = dist_cost[dist_min_loc]  # finding min of dist_cost
    best_route = route[dist_min_loc, :]  # initializing current traversed as best route
    pheromone = (1 - e) * pheromone  # evaporation of pheromone with (1-e)
    for i in range(m):
        for j in range(n):
            pheromone[int(route_opt[i, j]) - 1, int(route_opt[i, j + 1]) - 1] += 1 / dist_cost[i]  # updating pheromone with delta_distance
            # delta_distance will be more with min_dist i.e adding more weight to that route pheromone

print('melhor rota de ida :')
print(route_opt)
print()
print('melhor rota :', best_route)
print('custo total ida', int(dist_min_cost[0]))
IDA = int(dist_min_cost[0])

#calcula e armazena a VOLTA
for ite in range(iteration):
    for i in range(m):
        # Set starting point
        route2[i, 0] = end_point
        # Set ending point
        route2[i, -1] = start_point
        temp_visibility2 = np.array(visibility)  # creating a copy of visibility
        cur_loc2 = end_point - 1  # current city of the ant
        for j in range(n - 1):
            combine_feature2 = np.zeros(n)  # initializing combine_feature array to zero
            cum_prob2 = np.zeros(n)  # initializing cumulative probability array to zeros
            temp_visibility2[:, cur_loc2] = 0  # making visibility of the current city as zero
            p_feature2 = np.power(pheromone[cur_loc2, :], beta)  # calculating pheromone feature
            v_feature2 = np.power(temp_visibility2[cur_loc2, :], alpha)  # calculating visibility feature
            p_feature2 = p_feature2[:, np.newaxis]  # adding axis to make a size[5,1]
            v_feature2 = v_feature2[:, np.newaxis]  # adding axis to make a size[5,1]
            combine_feature2 = np.multiply(p_feature2, v_feature2)  # calculating the combine feature
            total2 = np.sum(combine_feature2)  # sum of all the feature
            probs2 = combine_feature2 / total2  # finding probability of element probs(i) = combine_feature(i)/total
            cum_prob2 = np.cumsum(probs2)  # calculating cumulative sum
            # Choose next city based on probability
            r2 = np.random.random_sample()  # random no in [0,1)
            next_city2 = np.nonzero(cum_prob2 > r2)[0][0] + 1
            # If the next city is the destination, break the loop
            if next_city2 == start_point:
                route2[i, j + 1] = start_point
                break
            else:
                route2[i, j + 1] = next_city2  # adding city to route
                cur_loc2 = next_city2 - 1
    route_opt2 = np.array(route2)  # initializing optimal route
    dist_cost2 = np.zeros((m, 1))  # initializing total_distance_of_tour with zero
    for i in range(m):
        s2 = 0
        for j in range(n):
            s2 = s2 + d.values[int(route_opt2[i, j]) - 1, int(route_opt2[i, j + 1]) - 1]  # calculating total tour distance
        dist_cost2[i] = s2  # storing distance of tour for 'i'th ant at location 'i'
    dist_min_loc2 = np.argmin(dist_cost2)  # finding location of minimum of dist_cost
    dist_min_cost2 = dist_cost2[dist_min_loc2]  # finding min of dist_cost
    best_route2 = route2[dist_min_loc2, :]  # initializing current traversed as best route
    pheromone2 = (1 - e) * pheromone  # evaporation of pheromone with (1-e)
    for i in range(m):
        for j in range(n):
            pheromone2[int(route_opt2[i, j]) - 1, int(route_opt2[i, j + 1]) - 1] += 1 / dist_cost2[i]  # updating pheromone with delta_distance
            # delta_distance will be more with min_dist i.e adding more weight to that route pheromone
print('-----------------------------------------------------------')
print('melhor rota de volta :')
print(route_opt2)
print()
print('melhor rota de volta :', best_route2)
print('custo da volta', int(dist_min_cost2[0]))
VOLTA= int(dist_min_cost2[0])
print('-----------------------------------------------------------')
print('custo total:', IDA + VOLTA)